// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/06/2018 10:33:08"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    m1x2
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module m1x2_vlg_sample_tst(
	input,
	sel,
	sampler_tx
);
input [9:0] input;
input  sel;
output sampler_tx;

reg sample;
time current_time;
always @(input or sel)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module m1x2_vlg_check_tst (
	output_0,
	output_1,
	sampler_rx
);
input [9:0] output_0;
input [9:0] output_1;
input sampler_rx;

reg [9:0] output_0_expected;
reg [9:0] output_1_expected;

reg [9:0] output_0_prev;
reg [9:0] output_1_prev;

reg [9:0] output_0_expected_prev;
reg [9:0] output_1_expected_prev;

reg [9:0] last_output_0_exp;
reg [9:0] last_output_1_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:2] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 2'b1;
end

// update real /o prevs

always @(trigger)
begin
	output_0_prev = output_0;
	output_1_prev = output_1;
end

// update expected /o prevs

always @(trigger)
begin
	output_0_expected_prev = output_0_expected;
	output_1_expected_prev = output_1_expected;
end


// expected output_0[ 9 ]
initial
begin
	output_0_expected[9] = 1'bX;
end 
// expected output_0[ 8 ]
initial
begin
	output_0_expected[8] = 1'bX;
end 
// expected output_0[ 7 ]
initial
begin
	output_0_expected[7] = 1'bX;
end 
// expected output_0[ 6 ]
initial
begin
	output_0_expected[6] = 1'bX;
end 
// expected output_0[ 5 ]
initial
begin
	output_0_expected[5] = 1'bX;
end 
// expected output_0[ 4 ]
initial
begin
	output_0_expected[4] = 1'bX;
end 
// expected output_0[ 3 ]
initial
begin
	output_0_expected[3] = 1'bX;
end 
// expected output_0[ 2 ]
initial
begin
	output_0_expected[2] = 1'bX;
end 
// expected output_0[ 1 ]
initial
begin
	output_0_expected[1] = 1'bX;
end 
// expected output_0[ 0 ]
initial
begin
	output_0_expected[0] = 1'bX;
end 
// expected output_1[ 9 ]
initial
begin
	output_1_expected[9] = 1'bX;
end 
// expected output_1[ 8 ]
initial
begin
	output_1_expected[8] = 1'bX;
end 
// expected output_1[ 7 ]
initial
begin
	output_1_expected[7] = 1'bX;
end 
// expected output_1[ 6 ]
initial
begin
	output_1_expected[6] = 1'bX;
end 
// expected output_1[ 5 ]
initial
begin
	output_1_expected[5] = 1'bX;
end 
// expected output_1[ 4 ]
initial
begin
	output_1_expected[4] = 1'bX;
end 
// expected output_1[ 3 ]
initial
begin
	output_1_expected[3] = 1'bX;
end 
// expected output_1[ 2 ]
initial
begin
	output_1_expected[2] = 1'bX;
end 
// expected output_1[ 1 ]
initial
begin
	output_1_expected[1] = 1'bX;
end 
// expected output_1[ 0 ]
initial
begin
	output_1_expected[0] = 1'bX;
end 
// generate trigger
always @(output_0_expected or output_0 or output_1_expected or output_1)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected output_0 = %b | expected output_1 = %b | ",output_0_expected_prev,output_1_expected_prev);
	$display("| real output_0 = %b | real output_1 = %b | ",output_0_prev,output_1_prev);
`endif
	if (
		( output_0_expected_prev[0] !== 1'bx ) && ( output_0_prev[0] !== output_0_expected_prev[0] )
		&& ((output_0_expected_prev[0] !== last_output_0_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_0[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_0_expected_prev);
		$display ("     Real value = %b", output_0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_output_0_exp[0] = output_0_expected_prev[0];
	end
	if (
		( output_0_expected_prev[1] !== 1'bx ) && ( output_0_prev[1] !== output_0_expected_prev[1] )
		&& ((output_0_expected_prev[1] !== last_output_0_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_0[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_0_expected_prev);
		$display ("     Real value = %b", output_0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_output_0_exp[1] = output_0_expected_prev[1];
	end
	if (
		( output_0_expected_prev[2] !== 1'bx ) && ( output_0_prev[2] !== output_0_expected_prev[2] )
		&& ((output_0_expected_prev[2] !== last_output_0_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_0[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_0_expected_prev);
		$display ("     Real value = %b", output_0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_output_0_exp[2] = output_0_expected_prev[2];
	end
	if (
		( output_0_expected_prev[3] !== 1'bx ) && ( output_0_prev[3] !== output_0_expected_prev[3] )
		&& ((output_0_expected_prev[3] !== last_output_0_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_0[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_0_expected_prev);
		$display ("     Real value = %b", output_0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_output_0_exp[3] = output_0_expected_prev[3];
	end
	if (
		( output_0_expected_prev[4] !== 1'bx ) && ( output_0_prev[4] !== output_0_expected_prev[4] )
		&& ((output_0_expected_prev[4] !== last_output_0_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_0[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_0_expected_prev);
		$display ("     Real value = %b", output_0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_output_0_exp[4] = output_0_expected_prev[4];
	end
	if (
		( output_0_expected_prev[5] !== 1'bx ) && ( output_0_prev[5] !== output_0_expected_prev[5] )
		&& ((output_0_expected_prev[5] !== last_output_0_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_0[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_0_expected_prev);
		$display ("     Real value = %b", output_0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_output_0_exp[5] = output_0_expected_prev[5];
	end
	if (
		( output_0_expected_prev[6] !== 1'bx ) && ( output_0_prev[6] !== output_0_expected_prev[6] )
		&& ((output_0_expected_prev[6] !== last_output_0_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_0[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_0_expected_prev);
		$display ("     Real value = %b", output_0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_output_0_exp[6] = output_0_expected_prev[6];
	end
	if (
		( output_0_expected_prev[7] !== 1'bx ) && ( output_0_prev[7] !== output_0_expected_prev[7] )
		&& ((output_0_expected_prev[7] !== last_output_0_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_0[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_0_expected_prev);
		$display ("     Real value = %b", output_0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_output_0_exp[7] = output_0_expected_prev[7];
	end
	if (
		( output_0_expected_prev[8] !== 1'bx ) && ( output_0_prev[8] !== output_0_expected_prev[8] )
		&& ((output_0_expected_prev[8] !== last_output_0_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_0[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_0_expected_prev);
		$display ("     Real value = %b", output_0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_output_0_exp[8] = output_0_expected_prev[8];
	end
	if (
		( output_0_expected_prev[9] !== 1'bx ) && ( output_0_prev[9] !== output_0_expected_prev[9] )
		&& ((output_0_expected_prev[9] !== last_output_0_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_0[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_0_expected_prev);
		$display ("     Real value = %b", output_0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_output_0_exp[9] = output_0_expected_prev[9];
	end
	if (
		( output_1_expected_prev[0] !== 1'bx ) && ( output_1_prev[0] !== output_1_expected_prev[0] )
		&& ((output_1_expected_prev[0] !== last_output_1_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_1_expected_prev);
		$display ("     Real value = %b", output_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_output_1_exp[0] = output_1_expected_prev[0];
	end
	if (
		( output_1_expected_prev[1] !== 1'bx ) && ( output_1_prev[1] !== output_1_expected_prev[1] )
		&& ((output_1_expected_prev[1] !== last_output_1_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_1_expected_prev);
		$display ("     Real value = %b", output_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_output_1_exp[1] = output_1_expected_prev[1];
	end
	if (
		( output_1_expected_prev[2] !== 1'bx ) && ( output_1_prev[2] !== output_1_expected_prev[2] )
		&& ((output_1_expected_prev[2] !== last_output_1_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_1_expected_prev);
		$display ("     Real value = %b", output_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_output_1_exp[2] = output_1_expected_prev[2];
	end
	if (
		( output_1_expected_prev[3] !== 1'bx ) && ( output_1_prev[3] !== output_1_expected_prev[3] )
		&& ((output_1_expected_prev[3] !== last_output_1_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_1[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_1_expected_prev);
		$display ("     Real value = %b", output_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_output_1_exp[3] = output_1_expected_prev[3];
	end
	if (
		( output_1_expected_prev[4] !== 1'bx ) && ( output_1_prev[4] !== output_1_expected_prev[4] )
		&& ((output_1_expected_prev[4] !== last_output_1_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_1[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_1_expected_prev);
		$display ("     Real value = %b", output_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_output_1_exp[4] = output_1_expected_prev[4];
	end
	if (
		( output_1_expected_prev[5] !== 1'bx ) && ( output_1_prev[5] !== output_1_expected_prev[5] )
		&& ((output_1_expected_prev[5] !== last_output_1_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_1[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_1_expected_prev);
		$display ("     Real value = %b", output_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_output_1_exp[5] = output_1_expected_prev[5];
	end
	if (
		( output_1_expected_prev[6] !== 1'bx ) && ( output_1_prev[6] !== output_1_expected_prev[6] )
		&& ((output_1_expected_prev[6] !== last_output_1_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_1[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_1_expected_prev);
		$display ("     Real value = %b", output_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_output_1_exp[6] = output_1_expected_prev[6];
	end
	if (
		( output_1_expected_prev[7] !== 1'bx ) && ( output_1_prev[7] !== output_1_expected_prev[7] )
		&& ((output_1_expected_prev[7] !== last_output_1_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_1[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_1_expected_prev);
		$display ("     Real value = %b", output_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_output_1_exp[7] = output_1_expected_prev[7];
	end
	if (
		( output_1_expected_prev[8] !== 1'bx ) && ( output_1_prev[8] !== output_1_expected_prev[8] )
		&& ((output_1_expected_prev[8] !== last_output_1_exp[8]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_1[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_1_expected_prev);
		$display ("     Real value = %b", output_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_output_1_exp[8] = output_1_expected_prev[8];
	end
	if (
		( output_1_expected_prev[9] !== 1'bx ) && ( output_1_prev[9] !== output_1_expected_prev[9] )
		&& ((output_1_expected_prev[9] !== last_output_1_exp[9]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_1[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_1_expected_prev);
		$display ("     Real value = %b", output_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_output_1_exp[9] = output_1_expected_prev[9];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module m1x2_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [9:0] input;
reg sel;
// wires                                               
wire [9:0] output_0;
wire [9:0] output_1;

wire sampler;                             

// assign statements (if any)                          
m1x2 i1 (
// port map - connection between master ports and signals/registers   
	.\input (input),
	.output_0(output_0),
	.output_1(output_1),
	.sel(sel)
);
// \input [ 9 ]
initial
begin
	input[9] = 1'b0;
	input[9] = #130000 1'b1;
	input[9] = #110000 1'b0;
end 
// \input [ 8 ]
initial
begin
	input[8] = 1'b0;
	input[8] = #130000 1'b1;
	input[8] = #110000 1'b0;
end 
// \input [ 7 ]
initial
begin
	input[7] = 1'b0;
	input[7] = #130000 1'b1;
	input[7] = #110000 1'b0;
end 
// \input [ 6 ]
initial
begin
	input[6] = 1'b0;
	input[6] = #130000 1'b1;
	input[6] = #110000 1'b0;
end 
// \input [ 5 ]
initial
begin
	input[5] = 1'b0;
	input[5] = #130000 1'b1;
	input[5] = #110000 1'b0;
end 
// \input [ 4 ]
initial
begin
	input[4] = 1'b0;
	input[4] = #130000 1'b1;
	input[4] = #110000 1'b0;
end 
// \input [ 3 ]
initial
begin
	input[3] = 1'b0;
	input[3] = #130000 1'b1;
	input[3] = #110000 1'b0;
end 
// \input [ 2 ]
initial
begin
	input[2] = 1'b0;
	input[2] = #130000 1'b1;
	input[2] = #110000 1'b0;
end 
// \input [ 1 ]
initial
begin
	input[1] = 1'b0;
	input[1] = #130000 1'b1;
	input[1] = #110000 1'b0;
end 
// \input [ 0 ]
initial
begin
	input[0] = 1'b0;
	input[0] = #130000 1'b1;
	input[0] = #110000 1'b0;
end 

// sel
initial
begin
	sel = 1'b0;
	sel = #40000 1'b1;
	sel = #30000 1'b0;
	sel = #40000 1'b1;
	sel = #60000 1'b0;
	sel = #50000 1'b1;
	sel = #70000 1'b0;
end 

m1x2_vlg_sample_tst tb_sample (
	.input(input),
	.sel(sel),
	.sampler_tx(sampler)
);

m1x2_vlg_check_tst tb_out(
	.output_0(output_0),
	.output_1(output_1),
	.sampler_rx(sampler)
);
endmodule

