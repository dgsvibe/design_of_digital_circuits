// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// VENDOR "Altera"
// PROGRAM "Quartus II 64-Bit"
// VERSION "Version 13.1.0 Build 162 10/23/2013 SJ Web Edition"

// DATE "09/05/2018 09:20:05"

// 
// Device: Altera EP4CE115F29C7 Package FBGA780
// 

// 
// This Verilog file should be used for ModelSim-Altera (Verilog) only
// 

`timescale 1 ps/ 1 ps

module full_adder (
	x,
	y,
	cin,
	sum,
	cout);
input 	x;
input 	y;
input 	cin;
output 	sum;
output 	cout;

// Design Ports Information
// sum	=>  Location: PIN_W7,	 I/O Standard: 2.5 V,	 Current Strength: Default
// cout	=>  Location: PIN_W3,	 I/O Standard: 2.5 V,	 Current Strength: Default
// x	=>  Location: PIN_Y6,	 I/O Standard: 2.5 V,	 Current Strength: Default
// y	=>  Location: PIN_Y5,	 I/O Standard: 2.5 V,	 Current Strength: Default
// cin	=>  Location: PIN_W4,	 I/O Standard: 2.5 V,	 Current Strength: Default


wire gnd;
wire vcc;
wire unknown;

assign gnd = 1'b0;
assign vcc = 1'b1;
assign unknown = 1'bx;

tri1 devclrn;
tri1 devpor;
tri1 devoe;
wire \sum~output_o ;
wire \cout~output_o ;
wire \y~input_o ;
wire \x~input_o ;
wire \cin~input_o ;
wire \s_sum~0_combout ;
wire \s_cout~0_combout ;


// Location: IOOBUF_X0_Y12_N23
cycloneive_io_obuf \sum~output (
	.i(\s_sum~0_combout ),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\sum~output_o ),
	.obar());
// synopsys translate_off
defparam \sum~output .bus_hold = "false";
defparam \sum~output .open_drain_output = "false";
// synopsys translate_on

// Location: IOOBUF_X0_Y13_N2
cycloneive_io_obuf \cout~output (
	.i(\s_cout~0_combout ),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\cout~output_o ),
	.obar());
// synopsys translate_off
defparam \cout~output .bus_hold = "false";
defparam \cout~output .open_drain_output = "false";
// synopsys translate_on

// Location: IOIBUF_X0_Y12_N15
cycloneive_io_ibuf \y~input (
	.i(y),
	.ibar(gnd),
	.o(\y~input_o ));
// synopsys translate_off
defparam \y~input .bus_hold = "false";
defparam \y~input .simulate_z_as = "z";
// synopsys translate_on

// Location: IOIBUF_X0_Y13_N8
cycloneive_io_ibuf \x~input (
	.i(x),
	.ibar(gnd),
	.o(\x~input_o ));
// synopsys translate_off
defparam \x~input .bus_hold = "false";
defparam \x~input .simulate_z_as = "z";
// synopsys translate_on

// Location: IOIBUF_X0_Y14_N8
cycloneive_io_ibuf \cin~input (
	.i(cin),
	.ibar(gnd),
	.o(\cin~input_o ));
// synopsys translate_off
defparam \cin~input .bus_hold = "false";
defparam \cin~input .simulate_z_as = "z";
// synopsys translate_on

// Location: LCCOMB_X1_Y13_N16
cycloneive_lcell_comb \s_sum~0 (
// Equation(s):
// \s_sum~0_combout  = \y~input_o  $ (\x~input_o  $ (\cin~input_o ))

	.dataa(\y~input_o ),
	.datab(\x~input_o ),
	.datac(\cin~input_o ),
	.datad(gnd),
	.cin(gnd),
	.combout(\s_sum~0_combout ),
	.cout());
// synopsys translate_off
defparam \s_sum~0 .lut_mask = 16'h9696;
defparam \s_sum~0 .sum_lutc_input = "datac";
// synopsys translate_on

// Location: LCCOMB_X1_Y13_N2
cycloneive_lcell_comb \s_cout~0 (
// Equation(s):
// \s_cout~0_combout  = (\y~input_o  & ((\x~input_o ) # (\cin~input_o ))) # (!\y~input_o  & (\x~input_o  & \cin~input_o ))

	.dataa(\y~input_o ),
	.datab(\x~input_o ),
	.datac(\cin~input_o ),
	.datad(gnd),
	.cin(gnd),
	.combout(\s_cout~0_combout ),
	.cout());
// synopsys translate_off
defparam \s_cout~0 .lut_mask = 16'hE8E8;
defparam \s_cout~0 .sum_lutc_input = "datac";
// synopsys translate_on

assign sum = \sum~output_o ;

assign cout = \cout~output_o ;

endmodule
